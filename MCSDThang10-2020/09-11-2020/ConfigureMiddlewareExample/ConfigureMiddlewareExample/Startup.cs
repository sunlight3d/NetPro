using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ConfigureMiddlewareExample.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace ConfigureMiddlewareExample
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            //services.AddSingleton<ILogger, Logger>();
            //services.AddTransient<ILogger, Logger>();
            services.AddScoped<ILogger, Logger>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env,ILogger logger)
        {
            logger.Log("Xinh chao chao xin");
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            /*
            app.Use(async (context, next) =>
            {
                await context.Response.WriteAsync(
                    $"TESTTTTT Request path is: {context.Request.Path.Value} <br />");
                    await next.Invoke();
            });
            */
            app.UseStaticFiles();
            app.Use(async (context, next) =>
            {
                await context.Response.WriteAsync("This text was generated by the app.Run middleware.");
                await next.Invoke();
            });
            
            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("KOKO KO .");
            });

            /*
            app.Use(async (context, next) =>
            {
                await context.Response.WriteAsync(
                    $"Hahaha");
                bool isValid = false;
                if (isValid) {
                    await next.Invoke();
                }
            });
            app.Use(async (context, next) =>
            {
                await context.Response.WriteAsync(
                    $"Hehehe");
            });
            */
        }
    }
}
